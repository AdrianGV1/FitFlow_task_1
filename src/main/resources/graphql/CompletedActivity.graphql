scalar DateTime

type Query{
    completedActivityById(id: ID!): CompletedActivity
    completedActivities(page: Int!, size: Int!, q: String): CompletedActivityPage!
    completedActivitiesByUser(userId: ID!, page: Int!, size: Int!): CompletedActivityPage!
    completedActivitiesByProgressLog(progressLogId: ID!, page: Int!, size: Int!): CompletedActivityPage!
}

type Mutation{
    createCompletedActivity(input: CompletedActivityCreateInput!): CompletedActivity!
    updateCompletedActivity(id: ID!, input: CompletedActivityUpdateInput!): CompletedActivity!
    deleteCompletedActivity(id: ID!): Boolean!
}

type CompletedActivity {
    id: ID!
    completedAt: DateTime!
    notes: String
    progressLogId: ID!
    habitId: ID!
}

input CompletedActivityCreateInput {
    completedAt: DateTime!
    notes: String
    progressLogId: ID!
    habitId: ID!
}

input CompletedActivityUpdateInput {
    completedAt: DateTime
    notes: String
    progressLogId: ID
    habitId: ID
}

type CompletedActivityPage {
    content: [CompletedActivity!]!
    totalElements: Int!
    totalPages: Int!
    pageNumber: Int!
    pageSize: Int!
}